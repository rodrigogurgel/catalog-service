# This workflow uses actions that are not certified by GitHub.
# They are provided by a third-party and are governed by
# separate terms of service, privacy policy, and support
# documentation.
# This workflow will build a Java project with Gradle and cache/restore any dependencies to improve the workflow execution time
# For more information see: https://docs.github.com/en/actions/automating-builds-and-tests/building-and-testing-java-with-gradle

name: ECS CI with Gradle

on:
    push:
        branches: [ "main" ]

env:
    AWS_REGION: sa-east-1                                   # set this to your preferred AWS region, e.g. us-west-1
    ECR_REPOSITORY: catalog-service-repository              # set this to your Amazon ECR repository name
    ECS_SERVICE: catalog-service-service                    # set this to your Amazon ECS service name
    ECS_CLUSTER: catalog-service-cluster                    # set this to your Amazon ECS cluster name
    ECS_TASK_DEFINITION: .aws/task-definition.json          # set this to the path to your Amazon ECS task definition
    # file, e.g. .aws/task-definition.json
    CONTAINER_NAME: catalog-service-container               # set this to the name of the container in the
    # containerDefinitions section of your task definition

jobs:
    build:
        runs-on: ubuntu-latest
        permissions:
            contents: read

        steps:
            -   uses: actions/checkout@v4
            -   name: Set up JDK 17
                uses: actions/setup-java@v4
                with:
                    java-version: '17'
                    distribution: 'temurin'

            # Configure Gradle for optimal use in GitHub Actions, including caching of downloaded dependencies.
            # See: https://github.com/gradle/actions/blob/main/setup-gradle/README.md
            -   name: Setup Gradle
                uses: gradle/actions/setup-gradle@417ae3ccd767c252f5661f1ace9f835f9654f2b5 # v3.1.0

            -   name: Build with Gradle Wrapper
                run: ./gradlew build

            -   name: Configure AWS credentials
                uses: aws-actions/configure-aws-credentials@0e613a0980cbf65ed5b322eb7a1e075d28913a83
                with:
                    aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
                    aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
                    aws-region: ${{ env.AWS_REGION }}

            -   name: Login to Amazon ECR
                id: login-ecr
                uses: aws-actions/amazon-ecr-login@62f4f872db3836360b72999f4b87f1ff13310f3a

            -   name: Build, tag, and push image to Amazon ECR
                id: build-image
                env:
                    ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
                    IMAGE_TAG: ${{ github.sha }}
                run: |
                    # Build a docker container and
                    # push it to ECR so that it can
                    # be deployed to ECS.
                    docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG .
                    docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG
                    echo "image=$ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG" >> $GITHUB_OUTPUT

            -   name: Fill in the new image ID in the Amazon ECS task definition
                id: task-def
                uses: aws-actions/amazon-ecs-render-task-definition@c804dfbdd57f713b6c079302a4c01db7017a36fc
                with:
                    task-definition: ${{ env.ECS_TASK_DEFINITION }}
                    container-name: ${{ env.CONTAINER_NAME }}
                    image: ${{ steps.build-image.outputs.image }}

            -   name: Deploy Amazon ECS task definition
                uses: aws-actions/amazon-ecs-deploy-task-definition@df9643053eda01f169e64a0e60233aacca83799a
                with:
                    task-definition: ${{ steps.task-def.outputs.task-definition }}
                    service: ${{ env.ECS_SERVICE }}
                    cluster: ${{ env.ECS_CLUSTER }}
                    wait-for-service-stability: true

    dependency-submission:

        runs-on: ubuntu-latest
        permissions:
            contents: write

        steps:
            -   uses: actions/checkout@v4
            -   name: Set up JDK 17
                uses: actions/setup-java@v4
                with:
                    java-version: '17'
                    distribution: 'temurin'

            # Generates and submits a dependency graph, enabling Dependabot Alerts for all project dependencies.
            # See: https://github.com/gradle/actions/blob/main/dependency-submission/README.md
            -   name: Generate and submit dependency graph
                uses: gradle/actions/dependency-submission@417ae3ccd767c252f5661f1ace9f835f9654f2b5 # v3.1.0
